// Code generated by go-bindata.
// sources:
// resources/app/index.html
// resources/app/static/css/base.css
// DO NOT EDIT!

package main

import (
	"bytes"
	"compress/gzip"
	"fmt"
	"io"
	"io/ioutil"
	"os"
	"path/filepath"
	"strings"
	"time"
)

func bindataRead(data []byte, name string) ([]byte, error) {
	gz, err := gzip.NewReader(bytes.NewBuffer(data))
	if err != nil {
		return nil, fmt.Errorf("Read %q: %v", name, err)
	}

	var buf bytes.Buffer
	_, err = io.Copy(&buf, gz)
	clErr := gz.Close()

	if err != nil {
		return nil, fmt.Errorf("Read %q: %v", name, err)
	}
	if clErr != nil {
		return nil, err
	}

	return buf.Bytes(), nil
}

type asset struct {
	bytes []byte
	info  os.FileInfo
}

type bindataFileInfo struct {
	name    string
	size    int64
	mode    os.FileMode
	modTime time.Time
}

func (fi bindataFileInfo) Name() string {
	return fi.name
}
func (fi bindataFileInfo) Size() int64 {
	return fi.size
}
func (fi bindataFileInfo) Mode() os.FileMode {
	return fi.mode
}
func (fi bindataFileInfo) ModTime() time.Time {
	return fi.modTime
}
func (fi bindataFileInfo) IsDir() bool {
	return false
}
func (fi bindataFileInfo) Sys() interface{} {
	return nil
}

var _resourcesAppIndexHtml = []byte("\x1f\x8b\x08\x00\x00\x00\x00\x00\x00\xff\x6c\x53\xc1\x6e\xdb\x30\x0c\xbd\xe7\x2b\x58\x5d\x9a\x00\x8d\x7d\x1d\x5c\x3b\xc0\xd6\x65\xc0\x80\x01\xdb\xa1\x43\xb1\x23\x23\x31\xb1\x10\x59\x32\x44\xa6\x9d\x11\xe4\xdf\x07\x39\x8e\xe7\x26\xd5\x25\x12\xdf\x7b\xe4\x23\x19\x97\x77\x5f\x7f\x3e\x3d\xff\xf9\xb5\x86\x5a\x1a\xb7\x9a\x95\xe9\x07\x1c\xfa\x5d\xa5\xc8\xab\x14\x20\x34\xab\x19\x00\x40\xd9\x90\x20\xe8\x1a\x23\x93\x54\xea\xf7\xf3\xb7\xe5\x27\x35\x40\xce\xfa\x3d\x44\x72\x95\x62\xe9\x1c\x71\x4d\x24\x0a\xea\x48\xdb\x14\x41\xb1\x3a\xd7\xcc\xf9\x06\x99\x32\xcd\xac\xf2\xd5\xac\xcc\xcf\xa9\xcb\x4d\x30\xdd\x90\xc6\xd8\x57\xd0\x0e\x99\x2b\xf5\x16\xb1\x6d\x29\x0e\x05\xae\x51\x1d\xbc\x90\x97\x09\x7a\x61\xac\x5e\xc8\xe9\xd0\x10\x48\x80\xcf\x2c\xd6\x91\x96\x18\xfc\x3d\xc3\x26\x04\x61\x89\xd8\xde\x95\x79\x22\xde\x48\xc1\x9a\x4a\x69\x67\xf5\x5e\x41\xdf\x46\xa5\xf4\x21\x72\x88\x05\xb4\xc1\x7a\xa1\xf8\x08\x42\x7f\x65\x69\x48\x87\x88\x62\x83\x2f\xe0\xe0\x0d\x45\x67\x3d\xa9\xd5\x53\x92\x42\x4d\xb1\x2f\xbe\x23\x01\x84\x9a\x9c\x0b\x57\xf5\x26\xcf\xe1\x5a\xb2\x8e\xb6\x95\x73\x2c\xcf\xe1\x05\xad\xc0\x36\x44\xc0\xff\x1d\xa4\x9c\x1b\x82\x48\x68\xba\x9e\x67\x82\x3e\x34\xe4\x25\x43\x63\xd6\xaf\xe4\xe5\x87\x65\x21\x4f\x71\x7e\x3f\x91\x2d\x7b\xc1\xfd\x03\x6c\x0f\x5e\x27\xcb\xf3\x05\x1c\x47\x2b\x13\x62\xe6\x7a\xf9\x7c\xe4\x35\xc4\x8c\x3b\x9a\xd2\xd3\xe1\x37\x2b\xba\x86\x0b\x9c\x79\x6c\x6e\x38\xe9\x68\x64\x02\xc5\xd8\xa9\xe2\x06\xeb\x4b\x3b\x8a\x32\x66\x69\xb1\x73\x01\x4d\x76\x29\xfa\xf8\xa1\x66\x13\x09\xf7\xef\xa1\xd3\xf8\x3a\x4d\x44\xe3\x6c\x76\x24\x6b\x47\xe9\xfa\xa5\xfb\x6e\xe6\xc3\x7a\x17\x59\xf0\xfd\x0d\xaa\x8f\xe7\x72\x3d\x1b\x26\x6f\xe6\xc7\xd4\x6a\x71\xee\xe9\x01\x06\xc7\x05\x1c\x07\xcf\x05\xa8\x7e\xdb\xea\x74\x5a\xcc\xde\xdb\x4b\xd6\xca\xfc\xb2\xe4\x32\x3f\xff\xe5\xcb\xbc\xff\xe8\xfe\x05\x00\x00\xff\xff\xa3\xc9\x24\x03\x84\x03\x00\x00")

func resourcesAppIndexHtmlBytes() ([]byte, error) {
	return bindataRead(
		_resourcesAppIndexHtml,
		"resources/app/index.html",
	)
}

func resourcesAppIndexHtml() (*asset, error) {
	bytes, err := resourcesAppIndexHtmlBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "resources/app/index.html", size: 900, mode: os.FileMode(436), modTime: time.Unix(1495886672, 0)}
	a := &asset{bytes: bytes, info: info}
	return a, nil
}

var _resourcesAppStaticCssBaseCss = []byte("\x1f\x8b\x08\x00\x00\x00\x00\x00\x00\xff\x74\x8d\x31\x6e\xc3\x30\x0c\x45\x77\x9f\x82\x40\xd1\xad\x2e\x5c\x78\x53\x4f\x43\x8b\xb4\x44\x94\x96\x04\x95\xad\x6b\x14\xbe\x7b\x90\x28\xce\x92\x64\xfc\xef\x93\xff\x45\x5b\xf4\x0d\xa6\x4c\x1b\xfc\x77\x00\x00\x13\xfa\xaf\x50\xf3\x4f\xa2\xde\x67\xcd\xd5\xc1\xcb\x38\x8e\x9f\x97\xee\x00\xf3\x3c\x37\x10\x59\x42\x34\x07\x1f\xc3\xf0\xda\xc8\x82\x35\x48\x72\x30\xb4\x58\x90\x48\x52\xb8\xe5\x55\xc8\xe2\x71\xbf\x77\xdd\xfb\x5a\xb1\x14\xae\x57\x39\xc9\x77\x51\xdc\x1c\x18\x4e\xca\xcf\x1c\x77\x23\x3e\x27\xe3\x64\x0f\x47\x7a\xcf\xaa\xed\xcf\xf8\xcf\x7a\x54\x09\xc9\x81\xe7\x64\x5c\x1b\xff\xe5\x6a\xe2\x51\x8f\x6e\x11\xa2\xb3\x7d\x3f\x05\x00\x00\xff\xff\x50\x5c\x96\x33\x1d\x01\x00\x00")

func resourcesAppStaticCssBaseCssBytes() ([]byte, error) {
	return bindataRead(
		_resourcesAppStaticCssBaseCss,
		"resources/app/static/css/base.css",
	)
}

func resourcesAppStaticCssBaseCss() (*asset, error) {
	bytes, err := resourcesAppStaticCssBaseCssBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "resources/app/static/css/base.css", size: 285, mode: os.FileMode(436), modTime: time.Unix(1494851874, 0)}
	a := &asset{bytes: bytes, info: info}
	return a, nil
}

// Asset loads and returns the asset for the given name.
// It returns an error if the asset could not be found or
// could not be loaded.
func Asset(name string) ([]byte, error) {
	cannonicalName := strings.Replace(name, "\\", "/", -1)
	if f, ok := _bindata[cannonicalName]; ok {
		a, err := f()
		if err != nil {
			return nil, fmt.Errorf("Asset %s can't read by error: %v", name, err)
		}
		return a.bytes, nil
	}
	return nil, fmt.Errorf("Asset %s not found", name)
}

// MustAsset is like Asset but panics when Asset would return an error.
// It simplifies safe initialization of global variables.
func MustAsset(name string) []byte {
	a, err := Asset(name)
	if err != nil {
		panic("asset: Asset(" + name + "): " + err.Error())
	}

	return a
}

// AssetInfo loads and returns the asset info for the given name.
// It returns an error if the asset could not be found or
// could not be loaded.
func AssetInfo(name string) (os.FileInfo, error) {
	cannonicalName := strings.Replace(name, "\\", "/", -1)
	if f, ok := _bindata[cannonicalName]; ok {
		a, err := f()
		if err != nil {
			return nil, fmt.Errorf("AssetInfo %s can't read by error: %v", name, err)
		}
		return a.info, nil
	}
	return nil, fmt.Errorf("AssetInfo %s not found", name)
}

// AssetNames returns the names of the assets.
func AssetNames() []string {
	names := make([]string, 0, len(_bindata))
	for name := range _bindata {
		names = append(names, name)
	}
	return names
}

// _bindata is a table, holding each asset generator, mapped to its name.
var _bindata = map[string]func() (*asset, error){
	"resources/app/index.html":          resourcesAppIndexHtml,
	"resources/app/static/css/base.css": resourcesAppStaticCssBaseCss,
}

// AssetDir returns the file names below a certain
// directory embedded in the file by go-bindata.
// For example if you run go-bindata on data/... and data contains the
// following hierarchy:
//     data/
//       foo.txt
//       img/
//         a.png
//         b.png
// then AssetDir("data") would return []string{"foo.txt", "img"}
// AssetDir("data/img") would return []string{"a.png", "b.png"}
// AssetDir("foo.txt") and AssetDir("notexist") would return an error
// AssetDir("") will return []string{"data"}.
func AssetDir(name string) ([]string, error) {
	node := _bintree
	if len(name) != 0 {
		cannonicalName := strings.Replace(name, "\\", "/", -1)
		pathList := strings.Split(cannonicalName, "/")
		for _, p := range pathList {
			node = node.Children[p]
			if node == nil {
				return nil, fmt.Errorf("Asset %s not found", name)
			}
		}
	}
	if node.Func != nil {
		return nil, fmt.Errorf("Asset %s not found", name)
	}
	rv := make([]string, 0, len(node.Children))
	for childName := range node.Children {
		rv = append(rv, childName)
	}
	return rv, nil
}

type bintree struct {
	Func     func() (*asset, error)
	Children map[string]*bintree
}

var _bintree = &bintree{nil, map[string]*bintree{
	"resources": &bintree{nil, map[string]*bintree{
		"app": &bintree{nil, map[string]*bintree{
			"index.html": &bintree{resourcesAppIndexHtml, map[string]*bintree{}},
			"static": &bintree{nil, map[string]*bintree{
				"css": &bintree{nil, map[string]*bintree{
					"base.css": &bintree{resourcesAppStaticCssBaseCss, map[string]*bintree{}},
				}},
			}},
		}},
	}},
}}

// RestoreAsset restores an asset under the given directory
func RestoreAsset(dir, name string) error {
	data, err := Asset(name)
	if err != nil {
		return err
	}
	info, err := AssetInfo(name)
	if err != nil {
		return err
	}
	err = os.MkdirAll(_filePath(dir, filepath.Dir(name)), os.FileMode(0755))
	if err != nil {
		return err
	}
	err = ioutil.WriteFile(_filePath(dir, name), data, info.Mode())
	if err != nil {
		return err
	}
	err = os.Chtimes(_filePath(dir, name), info.ModTime(), info.ModTime())
	if err != nil {
		return err
	}
	return nil
}

// RestoreAssets restores an asset under the given directory recursively
func RestoreAssets(dir, name string) error {
	children, err := AssetDir(name)
	// File
	if err != nil {
		return RestoreAsset(dir, name)
	}
	// Dir
	for _, child := range children {
		err = RestoreAssets(dir, filepath.Join(name, child))
		if err != nil {
			return err
		}
	}
	return nil
}

func _filePath(dir, name string) string {
	cannonicalName := strings.Replace(name, "\\", "/", -1)
	return filepath.Join(append([]string{dir}, strings.Split(cannonicalName, "/")...)...)
}
